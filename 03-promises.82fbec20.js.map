{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAASF,SAASC,cAAc,sBAChCE,EAAQH,SAASC,cAAc,qBAC/BG,EAAOJ,SAASC,cAAc,oBACrBF,EAAKE,cAAc,UAE3BI,UAAUC,IAAI,UACrBP,EAAKQ,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAqBR,WACE,IACIC,EADAC,EAAW,EAEf,MAAMC,EAAeC,YAAYC,EAAQJ,GAEzC,SAASI,IACP,IAAIC,EAAeC,OAAOb,EAAMc,OAC5BN,GAAYT,EAAOe,OAEjBP,EADS,IAAbC,EACmBI,EACAX,EAAKa,MACpBN,EAAW,IACbI,GAAgBL,GAAgBC,EAAW,IA5BnD,SAAuBO,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAM,GAE1BA,EAAA,GAGP,CAgBMQ,CAAchB,EAAUI,GACrBa,MAAK,EAACV,SAAEA,EAAQC,MAAEA,MAEjBtB,EAAAgC,OAAOC,QAAQ,uBAAuBZ,QAAeC,MAAS,IAE/DY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBtB,EAAAgC,OAAOG,QAAQ,sBAAsBd,QAAeC,MAAS,IAEjER,GAAY,GAEZsB,cAAcrB,EAElB,CACF,CA/CCsB,EAED","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst amount = document.querySelector('input[name=amount]');\nconst delay = document.querySelector('input[name=delay]');\nconst step = document.querySelector('input[name=step]');\nconst submit = form.querySelector('button');\n\nsubmit.classList.add('submit');\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n createPromiseXTimes();\n  \n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n    // console.log(delay);\n  });\n}\n\nfunction createPromiseXTimes() {\n  let repeated = 1;\n  let intervalStep;  \n  const intervalTask = setInterval(doTask, intervalStep);\n  \n  function doTask() {\n    let promiseDelay = Number(delay.value);\n    if (repeated <= amount.value) {\n      repeated === 1\n        ? intervalStep = promiseDelay\n        : intervalStep = step.value;\n      if (repeated > 1) {\n        promiseDelay += intervalStep * (repeated - 1);\n      }\n      createPromise(repeated, promiseDelay)\n        .then(({ position, delay }) => {\n          // console.log('delay: ', delay);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      repeated += 1;\n    } else {\n      clearInterval(intervalTask);\n    }\n  }\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","classList","add","addEventListener","event","preventDefault","intervalStep","repeated","intervalTask","setInterval","doTask","promiseDelay","Number","value","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","Notify","success","catch","failure","clearInterval","$47d4ff9957288465$var$createPromiseXTimes"],"version":3,"file":"03-promises.82fbec20.js.map"}